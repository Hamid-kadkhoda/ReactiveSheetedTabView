@namespace System.ReactiveSheetedTabView

<style>
    .tab-button {
        height: 100%;
        display: flex;
        padding: 0px 12px;
        transition: all 150ms ease-out;
        align-items: center;
        position: relative;
    }

    .tab-button-underline {
        height: 4px;
        display: none;
        left: 0;
        bottom: 0;
        transition: all 150ms ease-out;
        position: absolute;
        width: 100%;
        z-index: 2;
        background-color: #3d8bfd;
    }

    .tab-button:hover {
        background-color: #e9ecef;
    }

    .tab-button-active {
        background-color: #e9ecef;
        color: #343a40;
        font-weight: bolder;
    }

</style>

<FlexLayout Style="height: 40px;" StyleClass="bg-white border-300">

    @foreach (ReactiveSheetedTabPanel Tab in Tabs)
    {
        <button class="tab-button
                @(Tab.IsActive ? "tab-button-active" : "")"
                @onclick="() => ActivateTab(Tab)">
            @if (Tab.IsDefault)
            {
                <FlexLayout>
                    <HomeIcon></HomeIcon>
                </FlexLayout>
            }
            else
            {
                <FlexLayout Spacing="2">
                    <span>@Tab.Title</span>
                    <span role="button"
                    @onclick:preventDefault
                    @onclick:stopPropagation
                          @onclick="() => CloseTab(Tab)"
                          title="Close Tab">
                        <CloseIcon></CloseIcon>
                    </span>
                </FlexLayout>
            }
            <span class="tab-button-underline
                    @(Tab.IsActive ? "block" : "")">
            </span>
        </button>
    }
</FlexLayout>
@{
    foreach (ReactiveSheetedTabPanel Tab in Tabs)
    {
        var parameters = new Dictionary<string, object>();

        parameters.Add("Title", Tab.Title);
        parameters.Add("Content", Tab.Content);
        parameters.Add("Key", Tab.Key);
        parameters.Add("IsActive", Tab.IsActive);

        <DynamicComponent Type="Tab.GetType()" Parameters="@parameters"></DynamicComponent>
    }
}

@code {

    [Inject] public ReactiveTabSheetManager TabSheetManager { get; set; } = default!;

    private List<ReactiveSheetedTabPanel> Tabs { get; set; } = new();

    protected override void OnInitialized()
    {
        TabSheetManager.TabsChange().Subscribe(list =>
        {
            Console.WriteLine("Listen on Tabs Change");
            if(list.Count > 0)
            {
                Console.WriteLine($"Tabs Count is {list.Count}");
                Console.WriteLine(list.GetType());
                Tabs = list;
                Console.WriteLine(Tabs.Count);
                InvokeAsync(StateHasChanged);                
            }
        });
    }

    private void ActivateTab(ReactiveSheetedTabPanel tab)
    {
        TabSheetManager.ActivatedTab(tab);
    }

    private void CloseTab(ReactiveSheetedTabPanel tab)
    {
        TabSheetManager.RemoveTab(tab);
    }


}
